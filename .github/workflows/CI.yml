# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    env:
      VOSK_HOST_URI: localhost
      CHATGPT_API_KEY: ${{ secrets.CHATGPT_API_KEY }}
      PYANNOTE_KEY: ${{ secrets.PYANNOTE_KEY }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Prepare tests
      run: |
        cd tests
        docker compose up -d
        sleep 10

    - name: Load keys
      run: |
        mkdir .venv
        echo -n "$CHATGPT_API_KEY" > .venv/CHATGPT_API
        echo -n "$PYANNOTE_KEY" > .venv/PYANNOTE_KEY

    - name: Test with pytest
      run: |
        pytest

    - name: Remove keys
      run: |
        rm .venv/CHATGPT_API
        rm .venv/PYANNOTE_KEY

    - name: Clean test docker
      run: |
        cd tests
        docker compose down

    - name: Show Docker logs
      if: failure()
      run: |
        docker compose logs